// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame_data.proto

#include "frame_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR FrameData::FrameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.frame_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDataDefaultTypeInternal() {}
  union {
    FrameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDataDefaultTypeInternal _FrameData_default_instance_;
static ::_pb::Metadata file_level_metadata_frame_5fdata_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_frame_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_frame_5fdata_2eproto = nullptr;

const uint32_t TableStruct_frame_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FrameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FrameData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::FrameData, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::FrameData, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::FrameData, _impl_.frame_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FrameData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_FrameData_default_instance_._instance,
};

const char descriptor_table_protodef_frame_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020frame_data.proto\032\037google/protobuf/time"
  "stamp.proto\"j\n\tFrameData\022\017\n\007version\030\001 \001("
  "\005\022\r\n\005image\030\002 \001(\014\022(\n\004time\030\003 \001(\0132\032.google."
  "protobuf.Timestamp\022\023\n\013frame_index\030\004 \001(\005B"
  "#B\017CameraFramework\252\002\017CameraFrameworkb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_frame_5fdata_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_frame_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_frame_5fdata_2eproto = {
    false, false, 204, descriptor_table_protodef_frame_5fdata_2eproto,
    "frame_data.proto",
    &descriptor_table_frame_5fdata_2eproto_once, descriptor_table_frame_5fdata_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_frame_5fdata_2eproto::offsets,
    file_level_metadata_frame_5fdata_2eproto, file_level_enum_descriptors_frame_5fdata_2eproto,
    file_level_service_descriptors_frame_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_frame_5fdata_2eproto_getter() {
  return &descriptor_table_frame_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_frame_5fdata_2eproto(&descriptor_table_frame_5fdata_2eproto);

// ===================================================================

class FrameData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const FrameData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FrameData::_Internal::time(const FrameData* msg) {
  return *msg->_impl_.time_;
}
void FrameData::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
FrameData::FrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FrameData)
}
FrameData::FrameData(const FrameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.frame_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_index_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.frame_index_));
  // @@protoc_insertion_point(copy_constructor:FrameData)
}

inline void FrameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.frame_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameData::~FrameData() {
  // @@protoc_insertion_point(destructor:FrameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void FrameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameData::Clear() {
// @@protoc_insertion_point(message_clear_start:FrameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frame_index_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.frame_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frame_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.frame_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // int32 frame_index = 4;
  if (this->_internal_frame_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_frame_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FrameData)
  return target;
}

size_t FrameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FrameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 frame_index = 4;
  if (this->_internal_frame_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameData::GetClassData() const { return &_class_data_; }


void FrameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameData*>(&to_msg);
  auto& from = static_cast<const FrameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FrameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_frame_index() != 0) {
    _this->_internal_set_frame_index(from._internal_frame_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameData::CopyFrom(const FrameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameData::IsInitialized() const {
  return true;
}

void FrameData::InternalSwap(FrameData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameData, _impl_.frame_index_)
      + sizeof(FrameData::_impl_.frame_index_)
      - PROTOBUF_FIELD_OFFSET(FrameData, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frame_5fdata_2eproto_getter, &descriptor_table_frame_5fdata_2eproto_once,
      file_level_metadata_frame_5fdata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FrameData*
Arena::CreateMaybeMessage< ::FrameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FrameData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
